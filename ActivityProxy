package com.yy.mobile.proxy.plugin;

import android.app.Activity;
import android.app.Application;
import android.app.Instrumentation;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;
import android.view.Window;
import android.view.WindowManager;


import java.lang.reflect.Field;
import java.lang.reflect.Method;

import androidx.fragment.app.FragmentActivity;

public class ActivityProxy extends Activity {
    private static final String TAG = "ActivityProxy";

    private String mClassName;
    private Activity mPluginActivity;
    private Instrumentation mInstrumentation;

    private Field mToken, mIdent, mLastNonConfigurationInstances, mCurrentConfig,
            mEmbeddedID, mActivityInfo, mReferrer, mVoiceInteractor,
            mActivityConfigCallback, mAssistToken, mMainThread;

    private static Class<?> activityThreadClass;

    static {
        try {
            activityThreadClass = Class.forName("android.app.ActivityThread");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public ActivityProxy(String targetClassName) {
        super();
        mClassName = targetClassName;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        /*如果不成功,要结束此activity*/
        super.onCreate(savedInstanceState);
        boolean proxySuccess = true;
        Intent intent = getIntent();

        Field mFieldInstrumentation;
        try {
            mFieldInstrumentation = Activity.class.getDeclaredField("mInstrumentation");
            mFieldInstrumentation.setAccessible(true);
            mInstrumentation = (Instrumentation) mFieldInstrumentation.get(this);
        } catch (Exception e) {
            proxySuccess = false;
        }

        /*创建代理Activity*/
        if (intent != null) {
            mPluginActivity = createProxyActivity(intent);
        } else {
            proxySuccess = false;
            Log.e(TAG, "createProxyActivity failed ...");
        }

        /*调用插件onCreate生命周期*/
        if (mPluginActivity != null) {
            try {
                mInstrumentation.callActivityOnCreate(mPluginActivity, savedInstanceState);
            } catch (Exception e) {
                handleException(e);
            }
        } else {
            proxySuccess = false;
            Log.e(TAG, "mPluginActivity empty, please check ...");
        }

        if (!proxySuccess) {
            handleException(null); /*结束此activity,以防止黑屏出现*/
        }
    }

    @Override
    protected void onNewIntent(Intent intent) {
        if (mPluginActivity != null) {
            try {
                mInstrumentation.callActivityOnNewIntent(mPluginActivity, intent);
            } catch (Exception e) {
                handleException(e);
            }
        }
        super.onNewIntent(intent);
    }

    @Override
    protected void onStart() {
        if (mPluginActivity != null) {
            try {
                mInstrumentation.callActivityOnStart(mPluginActivity);
            } catch (Exception e) {
                handleException(e);
            }
        }
        super.onStart();
    }

    @Override
    protected void onRestart() {
        if (mPluginActivity != null) {
            try {
                mInstrumentation.callActivityOnRestart(mPluginActivity);
            } catch (Exception e) {
                handleException(e);
            }
        }
        super.onRestart();
    }

    @Override
    protected void onPostResume() {
        if (mPluginActivity != null) {
            try {
                Reflect.invokeNoException(FragmentActivity.class,
                        mPluginActivity, "onResumeFragments", null);
            } catch (Exception e) {
                handleException(e);
            }
        }
        super.onPostResume();
    }
    @Override
    protected void onResume() {
        if (mPluginActivity != null) {
            try {
                mInstrumentation.callActivityOnResume(mPluginActivity);
            } catch (Exception e) {
                handleException(e);
            }
        }
        super.onResume();
    }

    @Override
    protected void onPause() {
        if (mPluginActivity != null) {
            try {
                mInstrumentation.callActivityOnPause(mPluginActivity);
            } catch (Exception e) {
                handleException(e);
            }
        }
        super.onPause();
    }

    @Override
    protected void onStop() {
        if (mPluginActivity != null) {
            try {
                mInstrumentation.callActivityOnStop(mPluginActivity);
            } catch (Exception e) {
                handleException(e);
            }
        }
        super.onStop();
    }

    @Override
    protected void onDestroy() {
        if (mPluginActivity != null) {
/*            try {
                Method incrementExpectedActivityCount =
                StrictMode.class.getDeclaredMethod("decrementExpectedActivityCount", Class.class);
                incrementExpectedActivityCount.setAccessible(true);
                incrementExpectedActivityCount.invoke(null, mClassLoader.loadClass(mClassName));
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }*/
            try {
                mInstrumentation.callActivityOnDestroy(mPluginActivity);
            } catch (Exception e) {
                handleException(e);
            }
        }
        super.onDestroy();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        Reflect.invokeNoException(Activity.class, mPluginActivity, "onActivityResult",
                new Class[]{int.class, int.class, Intent.class},
                requestCode, resultCode, data);
        super.onActivityResult(requestCode, resultCode, data);
    }

    private void handleException(Exception e) {
        if (e != null) {
            Log.e(TAG, "handleException", e);
        }
        finish();
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        try {
            mInstrumentation.callActivityOnSaveInstanceState(mPluginActivity, outState);
        } catch (Exception e) {
            handleException(e);
        }
        super.onSaveInstanceState(outState);
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        try {
            mInstrumentation
                    .callActivityOnRestoreInstanceState(mPluginActivity, savedInstanceState);
        } catch (Exception e) {
            handleException(e);
        }
        super.onRestoreInstanceState(savedInstanceState);
    }

    private Activity createProxyActivity(Intent customIntent) {
        Activity activity;
        ClassLoader classLoader = ActivityProxy.class.getClassLoader();

        try {
            activity = mInstrumentation.newActivity(classLoader, mClassName, customIntent);
            customIntent.setExtrasClassLoader(classLoader);

/*            Method incrementExpectedActivityCount =
StrictMode.class.getDeclaredMethod("incrementExpectedActivityCount", Class.class);
            incrementExpectedActivityCount.setAccessible(true);
            incrementExpectedActivityCount.invoke(null, classLoader.loadClass(mClassName));*/

            Method attachMethod = reflectAttachMethod();
            invokeAttachMethod(activity, attachMethod, customIntent);

            /*绑定Window,以使插件窗口能刷新*/
            Window window = getWindow();
            WindowManager windowManager = getWindowManager();
            Field windowField = Activity.class.getDeclaredField("mWindow");
            windowField.setAccessible(true);
            windowField.set(activity, window);

            Field windowManagerField = Activity.class.getDeclaredField("mWindowManager");
            windowManagerField.setAccessible(true);
            windowManagerField.set(activity, windowManager);
            return activity;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * final void attach(Context context, ActivityThread aThread,
     * Instrumentation instr, IBinder token, int ident,
     * Application application, Intent intent, ActivityInfo info,
     * CharSequence title, Activity parent, String id,
     * NonConfigurationInstances lastNonConfigurationInstances,
     * Configuration config, String referrer, IVoiceInteractor voiceInteractor)
     */
    private Method reflectAttachMethod() throws NoSuchMethodException {
        Method attachMethod = null;

        Class<?> mNonConfigurationInstances = null;
        try {
            mNonConfigurationInstances =
                    Class.forName("android.app.Activity$NonConfigurationInstances");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        Class<?> mIVoiceInteractor = null;
        try {
            mIVoiceInteractor = Class.forName("com.android.internal.app.IVoiceInteractor");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        Class<?> mActivityConfigCallback = null;
        try {
            mActivityConfigCallback =
                    Class.forName("android.view.ViewRootImpl$ActivityConfigCallback");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        if (Build.VERSION.SDK_INT >= 29) {
            attachMethod =
                    Activity.class.getDeclaredMethod("attach", Context.class, activityThreadClass,
                            Instrumentation.class, IBinder.class, int.class, Application.class,
                            Intent.class, ActivityInfo.class,
                            CharSequence.class, Activity.class, String.class,
                            mNonConfigurationInstances, Configuration.class, String.class,
                            mIVoiceInteractor, Window.class, mActivityConfigCallback,
                            IBinder.class);
        } else if (Build.VERSION.SDK_INT >= 26) {
            attachMethod =
                    Activity.class.getDeclaredMethod("attach", Context.class, activityThreadClass,
                            Instrumentation.class, IBinder.class, int.class, Application.class,
                            Intent.class, ActivityInfo.class,
                            CharSequence.class, Activity.class, String.class,
                            mNonConfigurationInstances, Configuration.class, String.class,
                            mIVoiceInteractor, Window.class, mActivityConfigCallback);
        } else if (Build.VERSION.SDK_INT >= 24) {
            attachMethod =
                    Activity.class.getDeclaredMethod("attach", Context.class, activityThreadClass,
                            Instrumentation.class, IBinder.class, int.class, Application.class,
                            Intent.class, ActivityInfo.class,
                            CharSequence.class, Activity.class, String.class,
                            mNonConfigurationInstances, Configuration.class, String.class,
                            mIVoiceInteractor, Window.class);
        } else if (Build.VERSION.SDK_INT >= 22) {
            attachMethod =
                    Activity.class.getDeclaredMethod("attach", Context.class, activityThreadClass,
                            Instrumentation.class, IBinder.class, int.class, Application.class,
                            Intent.class, ActivityInfo.class,
                            CharSequence.class, Activity.class, String.class,
                            mNonConfigurationInstances, Configuration.class, String.class,
                            mIVoiceInteractor);
        } else if (Build.VERSION.SDK_INT == 21) {
            attachMethod =
                    Activity.class.getDeclaredMethod("attach", Context.class, activityThreadClass,
                            Instrumentation.class, IBinder.class, int.class, Application.class,
                            Intent.class, ActivityInfo.class,
                            CharSequence.class, Activity.class, String.class,
                            mNonConfigurationInstances, Configuration.class, mIVoiceInteractor);
        }

        attachMethod.setAccessible(true);
        return attachMethod;
    }

    private void reflectActivityField() throws NoSuchFieldException {
        mToken = Activity.class.getDeclaredField("mToken");
        mToken.setAccessible(true);

        mMainThread = Activity.class.getDeclaredField("mMainThread");
        mMainThread.setAccessible(true);

        mIdent = Activity.class.getDeclaredField("mIdent");
        mIdent.setAccessible(true);

        mLastNonConfigurationInstances =
                Activity.class.getDeclaredField("mLastNonConfigurationInstances");
        mLastNonConfigurationInstances.setAccessible(true);

        mCurrentConfig = Activity.class.getDeclaredField("mCurrentConfig");
        mCurrentConfig.setAccessible(true);

        mEmbeddedID = Activity.class.getDeclaredField("mEmbeddedID");
        mEmbeddedID.setAccessible(true);

        mActivityInfo = Activity.class.getDeclaredField("mActivityInfo");
        mActivityInfo.setAccessible(true);

        if (Build.VERSION.SDK_INT >= 22) {
            mReferrer = Activity.class.getDeclaredField("mReferrer");
            mReferrer.setAccessible(true);
        }

        if (Build.VERSION.SDK_INT >= 21) {
            try {
                mVoiceInteractor = Activity.class.getDeclaredField("mVoiceInteractor");
                mVoiceInteractor.setAccessible(true);
            } catch (Throwable ignore) {
                //
            }
        }

        if (Build.VERSION.SDK_INT >= 24) {
            try {
                Class cls = Class.forName("com.android.internal.policy.PhoneWindow");
                mActivityConfigCallback = cls.getDeclaredField("mActivityConfigCallback");
                mActivityConfigCallback.setAccessible(true);
            } catch (Throwable e) {
                //
            }
        }

        if (Build.VERSION.SDK_INT >= 29) {
            try {
                mAssistToken = Activity.class.getDeclaredField("mAssistToken");
                mAssistToken.setAccessible(true);
            } catch (Throwable e) {
                //
            }
        }
    }

    private void invokeAttachMethod(Activity activity, Method attachMethod, Intent intent)
            throws Exception {
        /*要首先调用此函数*/
        reflectActivityField();

        ActivityInfo activityInfo = (ActivityInfo) mActivityInfo.get(this);
        activityInfo.name = mClassName;
        IBinder token = (IBinder) mToken.get(this);
        int ident = (Integer) mIdent.get(this);
        String embeddedID = (String) mEmbeddedID.get(this);
        CharSequence title = getTitle();
        Activity parent = getParent();
        Object activityThread = mMainThread.get(this);

        if (Build.VERSION.SDK_INT >= 29) {
            Object activityConfigCallback = null;
            if (mActivityConfigCallback != null) {
                activityConfigCallback = mActivityConfigCallback.get(getWindow());
            }
            Object voiceInteractor = null;
            if (mVoiceInteractor != null) {
                voiceInteractor = mVoiceInteractor.get(this);
            }
            Object assistToken = null;
            if (mAssistToken != null) {
                assistToken = mAssistToken.get(this);
            }
            attachMethod.invoke(activity, getBaseContext(), activityThread, mInstrumentation,
                    token, ident, getApplication(), intent, activityInfo, title, parent, embeddedID,
                    mLastNonConfigurationInstances.get(this), mCurrentConfig.get(this),
                    mReferrer.get(this), voiceInteractor, getWindow(), activityConfigCallback,
                    assistToken);
        } else if (Build.VERSION.SDK_INT >= 26) {
            Object activityConfigCallback = mActivityConfigCallback.get(getWindow());
            attachMethod.invoke(activity, getBaseContext(), activityThread, mInstrumentation,
                    token, ident, getApplication(), intent, activityInfo, title, parent, embeddedID,
                    mLastNonConfigurationInstances.get(this), mCurrentConfig.get(this),
                    mReferrer.get(this), mVoiceInteractor.get(this), getWindow(),
                    activityConfigCallback);
        } else if (Build.VERSION.SDK_INT >= 24) {
            attachMethod.invoke(activity, getBaseContext(), activityThread, mInstrumentation,
                    token, ident, getApplication(), intent, activityInfo, title, parent, embeddedID,
                    mLastNonConfigurationInstances.get(this), mCurrentConfig.get(this),
                    mReferrer.get(this), mVoiceInteractor.get(this), getWindow());
        } else if (Build.VERSION.SDK_INT >= 22) {
            attachMethod.invoke(activity, getBaseContext(), activityThread, mInstrumentation,
                    token, ident, getApplication(), intent, activityInfo, title, parent, embeddedID,
                    mLastNonConfigurationInstances.get(this), mCurrentConfig.get(this),
                    mReferrer.get(this), mVoiceInteractor.get(this));
        } else if (Build.VERSION.SDK_INT == 21) {
            attachMethod.invoke(activity, getBaseContext(), activityThread, mInstrumentation,
                    token, ident, getApplication(), intent, activityInfo, title, parent, embeddedID,
                    mLastNonConfigurationInstances.get(this), mCurrentConfig.get(this),
                    mVoiceInteractor.get(this));
        }
    }
}
